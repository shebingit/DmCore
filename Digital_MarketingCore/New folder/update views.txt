  ---- Tl module views  update ---


def tl_lead_list(request):
    if 'emp_id' in request.session:
        if request.session.has_key('emp_id'):
            emp_id = request.session['emp_id']
           
        else:
            return redirect('/')
        
        emp_dash = LogRegister_Details.objects.get(id=emp_id)
        dash_details = EmployeeRegister_Details.objects.get(logreg_id=emp_dash)

        team = Allocation_Details.objects.filter(allocat_to=dash_details)
        
        team_ids = [t.allocatEmp_id_id for t in team]
        team_ids.append(dash_details.id)
        
        Work_Assign = WorkAssign.objects.filter(wa_work_allocate=dash_details).values('wa_clientId')
        clients = ClientRegister.objects.filter(id__in=Work_Assign)
        employees = EmployeeRegister_Details.objects.filter(id__in=team_ids,emp_active_status=1)

        # Notification-----------
        notifications = Notification.objects.filter(emp_id=dash_details,notific_status=0).order_by('-notific_date')

        leads_obj = Leads.objects.filter(lead_collect_Emp_id__in=team_ids).order_by('-lead_add_date')
       

        Cl_ID = None
        Ct_ID = None
        d1 = None
        d2 = None
        emp = None
        client_name = None
        category_name = None
        select_emp = None
        select_val = None

        if request.POST:
            Cl_ID = request.POST['client_change']
            Ct_ID = request.POST['category_name']
            emp = request.POST['select_emp']
            select_val = request.POST['select_status']
            d1 = request.POST['sdate']
            d2 = request.POST['edate']
            pg_num = request.POST['pgnum']

        else :
            Cl_ID = request.GET.get('Cl_ID')
            Ct_ID = request.GET.get('Ct_ID')
            emp = request.GET.get('employee')
            d1 = request.GET.get('start_date')
            d2 = request.GET.get('end_date')
            select_val = request.GET.get('sele_val')
            pg_num = request.GET.get('pg_num')

        if pg_num is None:
            pg_num = 10


        if Cl_ID and Ct_ID:
            leads_obj = leads_obj.filter(lead_work_regId__clientId__id=Cl_ID,lead_category_id__id=Ct_ID)
            client_name = ClientRegister.objects.get(id=Cl_ID)
            category_name = LeadCategory_Register.objects.get(id=Ct_ID)
            
        if d1:
            leads_obj = leads_obj.filter(lead_add_date__gte=d1)
        if d2:
            leads_obj = leads_obj.filter(lead_add_date__lte=d2)
        if emp:
            leads_obj = leads_obj.filter(lead_collect_Emp_id__id=emp)
            select_emp = EmployeeRegister_Details.objects.get(id=emp)

        if select_val:
            if select_val == 'Unverify':
                leads_obj = leads_obj.filter(lead_status=0,waste_data=0,repeated_status=0 )
            
            if select_val == 'Reapted':
                leads_obj = leads_obj.filter(repeated_status=1)
            
            if select_val == 'Transfered':
                leads_obj = leads_obj.filter(lead_transfer_status=1)

            if select_val == 'Waste':
                leads_obj = leads_obj.filter(waste_data=1)

            # if select_val == 'Incompleted':
            #     leads_obj = leads_obj.filter(lead_incomplete_status=1)
        

        leads_obj_count = leads_obj.count()

        paginator = Paginator(leads_obj, pg_num)  
        page_number = request.GET.get('page')
       
        leads = paginator.get_page(page_number)

    
        
        content = {'emp_dash':emp_dash,
                   'dash_details':dash_details,
                   'notifications':notifications,
                   'leads':leads,
                   'clients_objs':clients,
                   'employees':employees,
                   'leads_obj_count':leads_obj_count,
                   'select_emp':select_emp,'client_name':client_name,'category_name':category_name,
                   'select_val':select_val,
                    'Cl_ID':Cl_ID,'Ct_ID':Ct_ID,'employee':emp,'start_date':d1,'end_date':d2,'pg_num':pg_num
                   }

        return render(request,'TL_lead_list.html',content)

    else:
            return redirect('/') 



=======================================================




	------ Executive Module views Update  ----



def executive_allleads(request):
    if 'emp_id' in request.session:
        if request.session.has_key('emp_id'):
            emp_id = request.session['emp_id']
           
        else:
            return redirect('/')
        
        emp_dash = LogRegister_Details.objects.get(id=emp_id)
        dash_details = EmployeeRegister_Details.objects.get(logreg_id=emp_dash)

        # notification-----------
        notifications = EmployeeRegister_Details.objects.filter(logreg_id=emp_dash)
        notification=Notification.objects.filter(emp_id=dash_details,notific_status=0).order_by('-notific_date','-notific_time')


        task_Assign = TaskAssign.objects.filter(ta_workerId=dash_details).values('ta_workAssignId')
        work_Assign = WorkAssign.objects.filter(id__in=task_Assign).values('wa_clientId')
        clients = ClientRegister.objects.filter(id__in=work_Assign)

        leads_obj = Leads.objects.filter(lead_collect_Emp_id=dash_details.id).order_by('-lead_add_date')
       

        Cl_ID = None
        Ct_ID = None
        d1 = None
        d2 = None
        client_name = None
        category_name = None
        select_val = None

        if request.POST:
            Cl_ID = request.POST['client_change']
            Ct_ID = request.POST['category_name']
            d1 = request.POST['sdate']
            d2 = request.POST['edate']
            select_val = request.POST['select_status']
            pg_num = request.POST['pgnum']

        else :
            Cl_ID = request.GET.get('Cl_ID')
            Ct_ID = request.GET.get('Ct_ID')
            select_val = request.GET.get('sele_val')
            d1 = request.GET.get('start_date')
            d2 = request.GET.get('end_date')
            pg_num = request.GET.get('pg_num')

        if pg_num is None:
            pg_num = 10


        if Cl_ID :
            leads_obj = leads_obj.filter(lead_work_regId__clientId__id=Cl_ID)
            client_name = ClientRegister.objects.get(id=Cl_ID)
            category_name = LeadCategory_Register.objects.get(id=Ct_ID)
            
        if d1:
            leads_obj = leads_obj.filter(lead_add_date__gte=d1)
        if d2:
            leads_obj = leads_obj.filter(lead_add_date__lte=d2)

        if select_val:
            if select_val == 'Unverify':
                leads_obj = leads_obj.filter(lead_status=0,waste_data=0,repeated_status=0 )
            
            if select_val == 'Reapted':
                leads_obj = leads_obj.filter(repeated_status=1)
            
            if select_val == 'Transfered':
                leads_obj = leads_obj.filter(lead_transfer_status=1)

            if select_val == 'Waste':
                leads_obj = leads_obj.filter(waste_data=1)

            # if select_val == 'Incompleted':
            #     leads_obj = leads_obj.filter(lead_incomplete_status=1)

            

        leads_obj_count = leads_obj.count()

        paginator = Paginator(leads_obj, pg_num)  
        page_number = request.GET.get('page')
       
        leads = paginator.get_page(page_number)

    
        
        content = {
            'emp_dash':emp_dash,
            'dash_details':dash_details,
            'notifications':notifications,
            'notification':notification,
            'leads':leads,
                   'clients_objs':clients,
                   'leads_obj_count':leads_obj_count,
                 'client_name':client_name,
                   'select_val':select_val,
                   'category_name':category_name,
                'Cl_ID':Cl_ID,'Ct_ID':Ct_ID,'start_date':d1,'end_date':d2,'pg_num':pg_num
            
            
        }

        return render(request,'Executive_all_leads.html',content)

    else:
            return redirect('/')
